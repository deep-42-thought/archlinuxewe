#!/bin/bash

# init variables
tmpDir="$(mktemp -d /tmp/archive.XXXXXX)"
pkgDir="/srv/arch-mirror/arch/arch/archlinuxewe/os"
pkgSrcDir="$(dirname $(readlink -f -n "$0"))"
[ "$(hostname)" == "rechenknecht" ] && aufRechenknecht=true || aufRechenknecht=false
force=false
upload=true
updateMe=true

# print help screen
usage()
{
  >&2 echo ''
  >&2 echo 'Skript zum Updaten der selbsterstellten Archlinux-Pakete'
  >&2 echo ''
  >&2 echo 'Verwendung:'
  >&2 echo '  '"$0"' [ -f|--force ] [ --no-upload ] [ --no-selfUpdate ]'
  >&2 echo '    -f|--force:       rebuild packages even if they look up to date'
  >&2 echo '    --no-upload:      do not upload built packages from rechenknecht to jeti100'
  >&2 echo '    --no-selfUpdate:  do not update this script from git'
  >&2 echo ''
  exit 1
}

# parse arguments
eval set -- "$(getopt -o f --long force,no-upload,no-selfUpdate -n "$(basename "$0")" -- "$@" || echo "usage")"

while true
do
  case $1 in
    -f|--force)
      force=true
      shift
    ;;
    --no-upload)
      upload=false
      shift
    ;;
    --no-selfUpdate)
      updateMe=false
      shift
    ;;
    --)
      shift
      break
    ;;
    *)
      >&2 echo "FEHLER: Verstehe Option \"$1\" doch nicht! Ich beende."
      exit 1
  esac
done

if [ ! $# -eq 0 ]
then
  >&2 echo 'FEHLER: Zu viele Argumente! Ich beende.'
  exit 1
fi

$aufRechenknecht && pkgSrcDir="${pkgSrcDir}/archPackages"
cd "${pkgSrcDir}"

# extract git HEAD
git archive --format tar HEAD | \
  tar -x -C "${tmpDir}" -f -

cd "${tmpDir}"

# update $0
if ${updateMe} && ${aufRechenknecht} && [ -e "$(basename $0)" ] && ! diff -q "$(basename $0)" "$0" &> /dev/null
then
  cp "$(basename $0)" "$0"
  $0 $@
  err=$?
  rm -rf "${tmpDir}"
  exit ${err}
fi

unset pakete
unset archs
unset verss

# collect packages
for paket in $( \
  echo */PKGBUILD | \
    sed "s|/PKGBUILD||g" \
  )
do
  [ -d "${paket}" ] || continue
  . ${paket}/PKGBUILD
  pkgFile="${paket}-${pkgver}-${pkgrel}-${arch[0]}.pkg.tar.xz"

  allExist=true
  [ "${arch[0]}" == "any" ] && \
    for dir in ${pkgDir}/*
    do
      [ "${dir}" == "any" ] && continue
      [ ! -d "${dir}" ] && continue
      [ ! -e "${dir}/${pkgFile}" ] && allExist=false
    done

  if ${force} || \
    ! ${aufRechenknecht} || \
    [ ! -e "${pkgDir}/${arch[0]}/${pkgFile}" ] || \
    ! ${allExist}
  then
    pakete[${#pakete[@]}]="${paket}"
    archs[${#archs[@]}]="${arch[0]}"
    verss[${#verss[@]}]="${pkgver}-${pkgrel}"
  fi
done

if ${aufRechenknecht}
then
  sudo pacman -Syy

# build packages
  for ((i=0; i<${#pakete[@]}; i++))
  do
    paket="${pakete[${i}]}"
    arch="${archs[${i}]}"
    vers="${verss[${i}]}"

    cd "${tmpDir}/${paket}"
    rm -f ${paket}-*.pkg.tar.xz
    makepkg -fcsr || exit $?

# upload packages
    if ${upload}
    then
      scp ${tmpDir}/${paket}/${paket}-${vers}-${arch}.pkg.tar.xz paule@127.0.0.1:${pkgDir}/${arch}/
      [ "${arch}" == "any" ] && ssh paule@127.0.0.1 '\
        cd '${pkgDir}'
        for dir in *
        do
          [ "${dir}" == "any" ] && continue
          [ ! -d "${dir}" ] && continue
          ln -s "'"${pkgDir}/${arch}/${paket}-${vers}-${arch}.pkg.tar.xz"'" "'"${pkgDir}"'/${dir}/"
        done \
      '
    fi
  done

# update packagedb
  if ${upload}
  then
    for ((i=0; i<${#pakete[@]}; i++))
    do
      echo "${pakete[${i}]}"
      echo "${verss[${i}]}"
      echo "${archs[${i}]}"
    done | \
      ssh paule@127.0.0.1 ' \
        cd "'"${pkgDir}"'"
        while read paket
        do
          read vers || break
          read oarch || break

          for arch in *
          do
            [ ! -d "${arch}" ] && continue
            [ ! "${arch}" == "any" ] && [ ! "${arch}" == "${oarch}" ] && continue

            ls ${arch}/${paket}-*-${oarch}.pkg.tar.xz | \
              grep -v "${arch}/${paket}-${vers}-${oarch}.pkg.tar.xz" | \
              xargs -rn1 rm
          done
        done 

# update db
        
        for arch in *
        do
          [ "${arch}" == "any" ] && continue
          [ ! -d "${arch}" ] && continue
          repo-add \
            '${pkgDir}'/${arch}/archlinuxewe.db.tar.gz \
            '${pkgDir}'/${arch}/*.pkg.tar.xz
        done
      '
  fi

else

# check packages
  err=false
  for ((i=0; i<${#pakete[@]}; i++))
  do
    paket="${pakete[${i}]}"

    . ${paket}/PKGBUILD

    if echo "${source}" | grep -q "://opensources\.eckner\.net/"
    then

# one of Erich's packages

      remSum="$(curl -o - "${source#*::}&post=sha256sum" 2> /dev/null)"
      if [ ! "${remSum}" == "${sha256sums}" ]
      then
        >&2 echo "sha256sum von ${pkgname} stimmt nicht: ${remSum} vs. ${sha256sums}."
        err=true
      fi

    elif echo "${source}" | grep -q "://arch\.eckner\.net/"
    then

# a modified official package

      offVer="$( \
        ssh paule@jeti100 'ls '"${pkgDir}"'/*/'"${paket}"'-*.pkg.tar.xz' | \
          xargs -n1 basename | \
          sort -V | \
          tail -n1 \
        )"
      if [ ! "${offVer}" == "${pkgname}-${pkgver}-${pkgrel}-${arch}.pkg.tar.xz" ]
      then
        >&2 echo "${pkgname} ist in den offiziellen Quellen aktueller: ${offVer}."
        err=true
      fi

    fi

  done
  ${err} && exit 1

  cd "${pkgSrcDir}"
  git push || exit $?

  ${force} && opts="-f" || opts=""

  ssh rechenknecht "~/archPackagesUpdate" ${opts} || exit $?
fi

# clean up
rm -rf "${tmpDir}"
