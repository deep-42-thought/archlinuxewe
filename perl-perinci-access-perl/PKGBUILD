# Maintainer: Erich Eckner <arch at eckner dot net>
# Generator : neuesPerlPaket (97841193a0046800a1ed3cebc0718afe92066b6f1190519a623e66830c355902620a8d956439b9825c773ea4af1a5a3ff917dc0d9a50bafb588ca09da5980c74)

pkgname='perl-perinci-access-perl'
pkgver='0.88'
pkgrel='2'
pkgdesc='Access Perl module, functions, variables through Riap'
arch=('any')
license=('PerlArtistic' 'GPL')
options=('!emptydirs')
depends=(
  'perl>=5.10.1'
  'perl-class-inspector'
  'perl-experimental'
  'perl-log-ger>=0.011'
  'perl-module-list'
  'perl-module-path-more>=0.32'
  'perl-package-moreutil'
  'perl-parent'
  'perl-perinci-access-base>=0.31'
  'perl-perinci-object>=0.26'
  'perl-perinci-sub-complete>=0.89'
  'perl-perinci-sub-getargs-argv>=0.80'
  'perl-perinci-sub-normalize>=0.19'
  'perl-perinci-sub-util>=0.46'
  'perl-perinci-sub-wrapper>=0.83'
  'perl-progress-any'
  'perl-scalar-list-utils'
  'perl-tie-cache'
  'perl-uri'
  'perl-uuid-random'
)
makedepends=(
  'perl'
  'perl-extutils-makemaker'
  'perl-file-slurper'
  'perl-file-temp'
  'perl-io'
  'perl-lib'
  'perl-monkey-patch-action'
  'perl-pathtools'
  'perl-perinci-examples>=0.79'
  'perl-test-exception'
  'perl-test-simple>=0.98'
)
checkdepends=(
  'perl-pod-coverage-trustpod'
  'perl-test-pod'
  'perl-test-pod-coverage'
)
url='https://metacpan.org/release/Perinci-Access-Perl'
_distdir="Perinci-Access-Perl-${pkgver}"
source=("https://cpan.metacpan.org/authors/id/P/PE/PERLANCAR/${_distdir}.tar.gz")
sha512sums=('b4eb8248b5d739922f6c5ed5eb0eed6a35c9773e916595fe1e53e17bc42af36e1eaf2261af567a40e5fbc49eabe9652d382c125e94e2695172f4c5cb43a1a18c')

build() {
  cd "${srcdir}/${_distdir}"

  # Setting these env variables overwrites any command-line-options we don't want...
  export PERL_MM_USE_DEFAULT=1 PERL_AUTOINSTALL=--skipdeps \
    PERL_MM_OPT="INSTALLDIRS=vendor DESTDIR='${pkgdir}'" \
    PERL_MB_OPT="--installdirs vendor --destdir '${pkgdir}'" \
    MODULEBUILDRC=/dev/null

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    perl Makefile.PL
    make
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build.PL
    perl Build
  fi
}

check() {
  cd "${srcdir}/${_distdir}"

  export AUTHOR_TESTING=1

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    make test
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build test
  fi
}

package() {
  cd "${srcdir}/${_distdir}"

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    make install
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build install
  fi

  # remove perllocal.pod and .packlist
  find "${pkgdir}" -name .packlist -o -name perllocal.pod -delete
}
