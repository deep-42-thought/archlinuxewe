# Maintainer: Erich Eckner <arch at eckner dot net>
# Generator : neuesPerlPaket (568f5d2df596725567f1a6081bf01d21ef231fbfd3571a4132eb004ebb50cfaada248486250b351491d5fd615f2c1d7f07d339c6e6ad8bb59146399a117bec0c)

pkgname='perl-ppix-quotelike'
pkgver=0.011
pkgrel=1
pkgdesc='Parse Perl string literals and string-literal-like things.'
arch=('any')
license=('PerlArtistic' 'GPL')
options=('!emptydirs')
makedepends=(
  'perl-test-simple>=0.88')
depends=(
  'perl>=5.6.0'
  'perl-base'
  'perl-carp'
  'perl-constant'
  'perl-encode'
  'perl-exporter'
  'perl-ppi>=1.117'
  'perl-readonly'
  'perl-scalar-list-utils'
  'perl-text-tabs')
provides=(
  'perl-ppix-quotelike-constant=0.011'
  'perl-ppix-quotelike-dumper=0.011'
  'perl-ppix-quotelike-token=0.011'
  'perl-ppix-quotelike-token-control=0.011'
  'perl-ppix-quotelike-token-delimiter=0.011'
  'perl-ppix-quotelike-token-interpolation=0.011'
  'perl-ppix-quotelike-token-string=0.011'
  'perl-ppix-quotelike-token-structure=0.011'
  'perl-ppix-quotelike-token-unknown=0.011'
  'perl-ppix-quotelike-token-whitespace=0.011'
  'perl-ppix-quotelike-utils=0.011')
url='https://metacpan.org/release/PPIx-QuoteLike'
_distdir="PPIx-QuoteLike-${pkgver}"
source=("https://cpan.metacpan.org/authors/id/W/WY/WYANT/${_distdir}.tar.gz")
sha512sums=('6c5eb263e0b39d5d665623831c3b8e24099e6023c48893f0ecfef902446eff1533170c6996f4a62367c1dd9eb50e8fd3a444447e2a9c3cffdc8ff30114d994ee')

build() {
  cd "${srcdir}/${_distdir}"

  # Setting these env variables overwrites any command-line-options we don't want...
  export PERL_MM_USE_DEFAULT=1 PERL_AUTOINSTALL=--skipdeps \
    PERL_MM_OPT="INSTALLDIRS=vendor DESTDIR='${pkgdir}'" \
    PERL_MB_OPT="--installdirs vendor --destdir '${pkgdir}'" \
    MODULEBUILDRC=/dev/null

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    perl Makefile.PL
    make
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build.PL
    perl Build
  fi
}

check() {
  cd "${srcdir}/${_distdir}"

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    make test
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build test
  fi
}

package() {
  cd "${srcdir}/${_distdir}"

  # If using Makefile.PL
  if [ -r Makefile.PL ]; then
    make install
  # If using Build.PL
  elif [ -r Build.PL ]; then
    perl Build install
  fi

  # remove perllocal.pod and .packlist
  find "${pkgdir}" -name .packlist -o -name perllocal.pod -delete
}
